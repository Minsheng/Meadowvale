/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AdminUI.java
 *
 * Created on Jan 25, 2010, 8:34:50 AM
 */

package meadowvale;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.*;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.JPanel;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import javax.swing.JOptionPane;
import javax.swing.JDialog;
import meadowvale.controllers.exceptions.IllegalOrphanException;
import meadowvale.controllers.exceptions.NonexistentEntityException;
import meadowvale.entities.MvAddress;
import meadowvale.entities.MvPersonGroup;
import meadowvale.entities.MvPerson;
import meadowvale.entities.MvUser;
import meadowvale.entities.MvClass;
import meadowvale.entities.MvEnrollment;
import meadowvale.entities.MvWeek;
import meadowvale.entities.MvWeeklyLog;
import meadowvale.entities.MvCoop;

/**
 *
 * @author zuck
 */
public class AdminUI extends javax.swing.JFrame {
    public Application mvApp;
    public String curClassNumber;
    public String curClassTerm;
    public String curViewClassID;
    public String curViewFirstName;
    public String curViewLastName;
    public String coopSearchPredicate;
    public String checkMark;
    
    /** Creates new form AdminUI */
    public AdminUI(Application mvApp) {
        this.mvApp = mvApp;
        this.setTitle(mvApp.TITLE);
        char check = '\u2713';
        String strCheck = Character.toString(check);
        this.checkMark = "   " + strCheck;
        initComponents();
        centerPosition();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        studentOrAdmin = new javax.swing.ButtonGroup();
        classSelection = new javax.swing.ButtonGroup();
        addSClassSelection = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        mv_icon = new javax.swing.JLabel();
        mainPane = new javax.swing.JTabbedPane();
        home_panel = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        name_label = new javax.swing.JLabel();
        today_label = new javax.swing.JLabel();
        admin_home_pending_label = new javax.swing.JLabel();
        acc_panel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        class_term = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        reqCoopHrs = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        create_class = new javax.swing.JButton();
        classCreatedLabel = new javax.swing.JLabel();
        classNum = new javax.swing.JComboBox();
        classYear = new com.toedter.calendar.JYearChooser();
        classSeason = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        classNameField = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        selectRecent = new javax.swing.JRadioButton();
        weekAddedLabel = new javax.swing.JLabel();
        selectManual = new javax.swing.JRadioButton();
        jLabel24 = new javax.swing.JLabel();
        selectClassNum = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        selectSchoolYear = new com.toedter.calendar.JYearChooser();
        selectSchoolSeason = new javax.swing.JComboBox();
        weekEnd = new com.toedter.calendar.JDateChooser();
        weekStart = new com.toedter.calendar.JDateChooser();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        weekNum = new javax.swing.JComboBox();
        addWeek = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        weekDueDate = new com.toedter.calendar.JDateChooser();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        tue = new javax.swing.JTextField();
        mon = new javax.swing.JTextField();
        wed = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        thu = new javax.swing.JTextField();
        fri = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        sat = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        adminRadio = new javax.swing.JRadioButton();
        studentRadio = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        newAcctFirstName = new javax.swing.JTextField();
        newAcctLastName = new javax.swing.JTextField();
        acctCreatedLabel = new javax.swing.JLabel();
        newAccountButton = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        addSSelectRecent = new javax.swing.JRadioButton();
        addSSelectManual = new javax.swing.JRadioButton();
        jLabel31 = new javax.swing.JLabel();
        addAClassNum = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        addSSchoolSeason = new javax.swing.JComboBox();
        addSSchoolYear = new com.toedter.calendar.JYearChooser();
        jPanel5 = new javax.swing.JPanel();
        accountPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        studentList = new javax.swing.JList();
        jScrollPane9 = new javax.swing.JScrollPane();
        classList = new javax.swing.JList();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        adminList = new javax.swing.JList();
        jLabel35 = new javax.swing.JLabel();
        disableAccount = new javax.swing.JButton();
        acctDisabledLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        enableAccount = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        userNameField = new javax.swing.JTextField();
        newStudentPassword1Field = new javax.swing.JPasswordField();
        newStudentPassword2Field = new javax.swing.JPasswordField();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        changeStudentPassword = new javax.swing.JButton();
        changeStudentPasswordLabel = new javax.swing.JLabel();
        week_log_panel = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        admin_log_class_list = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        admin_log_student_list = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        admin_log_log_list = new javax.swing.JList();
        coop_panel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        addPostings = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();
        addRows = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        coopEntryTable = new javax.swing.JTable();
        jobAdded = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        coopSearchTable = new javax.swing.JTable();
        jLabel37 = new javax.swing.JLabel();
        searchCombo1 = new javax.swing.JComboBox();
        searchCombo2 = new javax.swing.JComboBox();
        searchText1 = new javax.swing.JTextField();
        searchText2 = new javax.swing.JTextField();
        andOR = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        orderCombo = new javax.swing.JComboBox();
        searchCoop = new javax.swing.JButton();
        updateRows = new javax.swing.JButton();
        rowsUpdated = new javax.swing.JLabel();
        report_panel = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel18 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        submissionTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        submissionClass = new javax.swing.JComboBox();
        personal_panel = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        changePassword = new javax.swing.JButton();
        changePasswordLabel = new javax.swing.JLabel();
        oldPasswordField = new javax.swing.JPasswordField();
        newPassword1Field = new javax.swing.JPasswordField();
        newPassword2Field = new javax.swing.JPasswordField();
        exit = new javax.swing.JButton();
        home_logout_button = new javax.swing.JButton();

        jToolBar1.setRollover(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel1.setMaximumSize(new java.awt.Dimension(867, 675));
        jPanel1.setMinimumSize(new java.awt.Dimension(867, 675));

        mv_icon.setBackground(new java.awt.Color(204, 204, 204));
        mv_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/meadowvale/resources/meadowvale_logo.jpg"))); // NOI18N

        mainPane.setBackground(new java.awt.Color(255, 255, 153));
        mainPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        mainPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        mainPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainPane.setName("viewTab"); // NOI18N
        mainPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainPaneStateChanged(evt);
            }
        });

        home_panel.setBackground(new java.awt.Color(255, 255, 153));
        home_panel.setName("homeTab"); // NOI18N

        jPanel12.setBackground(new java.awt.Color(255, 255, 153));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel3.setText("New Student Submissions:");

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel1.setText("Updates:");

        name_label.setFont(new java.awt.Font("Verdana", 1, 18));
        name_label.setText("Hello Message");

        today_label.setFont(new java.awt.Font("Verdana", 1, 18));
        today_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        today_label.setText("Date is shown here");

        admin_home_pending_label.setBackground(new java.awt.Color(255, 255, 153));
        admin_home_pending_label.setFont(new java.awt.Font("Verdana", 0, 14));
        admin_home_pending_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        admin_home_pending_label.setText("0");
        admin_home_pending_label.setOpaque(true);

        org.jdesktop.layout.GroupLayout jPanel12Layout = new org.jdesktop.layout.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(501, Short.MAX_VALUE)
                .add(today_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 255, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addContainerGap(687, Short.MAX_VALUE))
            .add(jPanel12Layout.createSequentialGroup()
                .add(97, 97, 97)
                .add(jLabel3)
                .add(18, 18, 18)
                .add(admin_home_pending_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(409, Short.MAX_VALUE))
            .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel12Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(name_label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(469, Short.MAX_VALUE)))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(today_label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(42, 42, 42)
                .add(jLabel1)
                .add(39, 39, 39)
                .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(admin_home_pending_label))
                .add(383, 383, 383))
            .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel12Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(name_label)
                    .add(500, 500, 500)))
        );

        org.jdesktop.layout.GroupLayout home_panelLayout = new org.jdesktop.layout.GroupLayout(home_panel);
        home_panel.setLayout(home_panelLayout);
        home_panelLayout.setHorizontalGroup(
            home_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(home_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        home_panelLayout.setVerticalGroup(
            home_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(home_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPane.addTab("Home", home_panel);

        acc_panel.setBackground(new java.awt.Color(255, 255, 153));
        acc_panel.setName("accountTab"); // NOI18N
        acc_panel.setPreferredSize(new java.awt.Dimension(768, 700));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 204));
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(1104, 560));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(1104, 560));

        class_term.setBackground(new java.awt.Color(255, 255, 204));

        jPanel17.setBackground(new java.awt.Color(255, 255, 204));

        jLabel7.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel7.setText("Add Classes");

        jLabel12.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel12.setText("Class Number:");

        jLabel19.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel19.setText("School Term:");

        jLabel20.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel20.setText("Required Co-op Hours:");

        reqCoopHrs.setFont(new java.awt.Font("Verdana", 0, 14));

        jLabel21.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel21.setText("hours");

        create_class.setFont(new java.awt.Font("Tahoma", 1, 14));
        create_class.setText("Create Class");
        create_class.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_classActionPerformed(evt);
            }
        });

        classCreatedLabel.setFont(new java.awt.Font("Verdana", 0, 14));
        classCreatedLabel.setForeground(new java.awt.Color(255, 0, 0));

        classNum.setFont(new java.awt.Font("Verdana", 0, 14));
        classNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No. 1", "No. 2", "No. 3", "No. 4", "No. 5", "No. 6", "No. 7", "No. 8", "No. 9", "No. 10" }));

        classSeason.setFont(new java.awt.Font("Verdana", 0, 14));
        classSeason.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Spring", "Summer", "Fall", "WInter" }));

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel6.setText("Class Name:");

        classNameField.setFont(new java.awt.Font("Verdana", 0, 14));

        org.jdesktop.layout.GroupLayout jPanel17Layout = new org.jdesktop.layout.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel17Layout.createSequentialGroup()
                .add(56, 56, 56)
                .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel20)
                    .add(jLabel19)
                    .add(jPanel17Layout.createSequentialGroup()
                        .add(create_class)
                        .add(18, 18, 18)
                        .add(classCreatedLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 427, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel17Layout.createSequentialGroup()
                        .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, classNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(60, 60, 60)
                        .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(classNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 179, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6)))
                    .add(jPanel17Layout.createSequentialGroup()
                        .add(classYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(classSeason, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel17Layout.createSequentialGroup()
                        .add(reqCoopHrs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(32, 32, 32)
                        .add(jLabel21)))
                .addContainerGap(125, Short.MAX_VALUE))
            .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel17Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jLabel7)
                    .add(609, 609, 609)))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel17Layout.createSequentialGroup()
                .add(61, 61, 61)
                .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(jLabel6))
                .add(18, 18, 18)
                .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(classNameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .add(classNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(28, 28, 28)
                .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(classSeason)
                    .add(classYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(29, 29, 29)
                .add(jLabel20)
                .add(18, 18, 18)
                .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(reqCoopHrs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(35, 35, 35)
                .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(classCreatedLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .add(create_class, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(91, 91, 91))
            .add(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel17Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jLabel7)
                    .addContainerGap(450, Short.MAX_VALUE)))
        );

        org.jdesktop.layout.GroupLayout class_termLayout = new org.jdesktop.layout.GroupLayout(class_term);
        class_term.setLayout(class_termLayout);
        class_termLayout.setHorizontalGroup(
            class_termLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(class_termLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        class_termLayout.setVerticalGroup(
            class_termLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(class_termLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add Classes", class_term);

        jPanel10.setBackground(new java.awt.Color(255, 255, 204));

        jLabel22.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel22.setText("Add Weeks to the Created Class");

        jLabel23.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel23.setText("Step 1: Select the class:");

        selectRecent.setBackground(new java.awt.Color(255, 255, 204));
        selectRecent.setFont(new java.awt.Font("Verdana", 0, 14));
        selectRecent.setText("Select the most recently created class, OR");

        weekAddedLabel.setFont(new java.awt.Font("Verdana", 0, 14));
        weekAddedLabel.setForeground(new java.awt.Color(255, 0, 0));

        selectManual.setBackground(new java.awt.Color(255, 255, 204));
        selectManual.setFont(new java.awt.Font("Verdana", 0, 14));
        selectManual.setText("Select the class based on class number and school term");

        jLabel24.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel24.setText("Class Number:");

        selectClassNum.setFont(new java.awt.Font("Verdana", 0, 14));
        selectClassNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No. 1", "No. 2", "No. 3", "No. 4", "No. 5", "No. 6", "No. 7", "No. 8", "No. 9", "No. 10" }));

        jLabel25.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel25.setText("School Term:");

        selectSchoolSeason.setFont(new java.awt.Font("Verdana", 0, 14));
        selectSchoolSeason.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Spring", "Summer", "Fall", "Winter" }));

        weekEnd.setFont(new java.awt.Font("Verdana", 0, 14));

        weekStart.setFont(new java.awt.Font("Verdana", 0, 14));

        jLabel26.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel26.setText("Step 2: Add a week / weeks to the class:");

        jLabel27.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel27.setText("Week Number:");

        jLabel28.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel28.setText("Week Start Date:");

        jLabel29.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel29.setText("Week End Date:");

        weekNum.setFont(new java.awt.Font("Verdana", 0, 14));
        weekNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No. 1", "No. 2", "No. 3", "No. 4", "No. 5", "No. 6", "No. 7", "No. 8", "No. 9", "No. 10", "No. 11", "No. 12", "No. 13", "No. 14", "No. 15", "No. 16", "No. 17", "No. 18", "No. 19", "No. 20" }));

        addWeek.setFont(new java.awt.Font("Tahoma", 1, 14));
        addWeek.setText("Add Week");
        addWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWeekActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel39.setText("Due Date:");

        weekDueDate.setFont(new java.awt.Font("Verdana", 0, 14));

        jLabel40.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel40.setText("Step 3: Specify Special Dates: ");

        jLabel41.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel41.setText("Monday:");

        jLabel42.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel42.setText("Tuesday:");

        jLabel43.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel43.setText("Wednesday:");

        tue.setFont(new java.awt.Font("Verdana", 0, 14));

        mon.setFont(new java.awt.Font("Verdana", 0, 14));

        wed.setFont(new java.awt.Font("Verdana", 0, 14));

        jLabel44.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel44.setText("Thursday:");

        thu.setFont(new java.awt.Font("Verdana", 0, 14));

        fri.setFont(new java.awt.Font("Verdana", 0, 14));

        jLabel45.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel45.setText("Saturday:");

        sat.setFont(new java.awt.Font("Verdana", 0, 14));

        jLabel46.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel46.setText("Friday:");

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel22)
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel10Layout.createSequentialGroup()
                                .add(62, 62, 62)
                                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(selectManual)
                                    .add(selectRecent)
                                    .add(jPanel10Layout.createSequentialGroup()
                                        .add(21, 21, 21)
                                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(selectClassNum, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(jLabel24, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .add(18, 18, 18)
                                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel25, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, selectSchoolYear, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .add(13, 13, 13)
                                        .add(selectSchoolSeason, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel10Layout.createSequentialGroup()
                                .add(31, 31, 31)
                                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel23)
                                    .add(jLabel26)
                                    .add(jLabel40)
                                    .add(addWeek)))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel10Layout.createSequentialGroup()
                                .add(89, 89, 89)
                                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(weekNum, 0, 105, Short.MAX_VALUE)
                                    .add(jLabel27))
                                .add(18, 18, 18)
                                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(weekStart, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                                    .add(jLabel28))
                                .add(18, 18, 18)
                                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(weekEnd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel29))))
                        .add(28, 28, 28)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel39)
                            .add(weekDueDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(456, 456, 456))
            .add(jPanel10Layout.createSequentialGroup()
                .add(101, 101, 101)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel42)
                    .add(jLabel41)
                    .add(jLabel43))
                .add(21, 21, 21)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(wed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel46)
                    .add(jLabel44)
                    .add(jLabel45))
                .add(21, 21, 21)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(sat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(thu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fri, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(102, Short.MAX_VALUE))
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel10Layout.createSequentialGroup()
                    .add(189, 189, 189)
                    .add(weekAddedLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 537, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(37, Short.MAX_VALUE)))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel22)
                .add(18, 18, 18)
                .add(jLabel23)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectRecent)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectManual)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel24)
                    .add(jLabel25))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(selectClassNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(selectSchoolYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(selectSchoolSeason, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jLabel26)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel27)
                    .add(jLabel28)
                    .add(jLabel29)
                    .add(jLabel39))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, weekEnd, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, weekNum)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, weekStart, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .add(weekDueDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .add(17, 17, 17)
                .add(jLabel40)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel41)
                            .add(mon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel42)
                            .add(tue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel43)
                            .add(wed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel44)
                            .add(thu, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel46)
                            .add(fri, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel45)
                            .add(sat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(18, 18, 18)
                .add(addWeek, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(33, 33, 33))
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel10Layout.createSequentialGroup()
                    .add(440, 440, 440)
                    .add(weekAddedLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(37, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Add Weeks", jPanel10);

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));

        jPanel16.setBackground(new java.awt.Color(255, 255, 204));

        adminRadio.setBackground(new java.awt.Color(255, 255, 204));
        adminRadio.setFont(new java.awt.Font("Verdana", 1, 14));
        adminRadio.setText("Admin");

        studentRadio.setBackground(new java.awt.Color(255, 255, 204));
        studentRadio.setFont(new java.awt.Font("Verdana", 1, 14));
        studentRadio.setText("Student");

        jLabel11.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel11.setText("Create New Accounts");

        jLabel13.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel13.setText("Last Name:");

        jLabel10.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel10.setText("First Name:");

        newAcctFirstName.setFont(new java.awt.Font("Verdana", 0, 14));

        newAcctLastName.setFont(new java.awt.Font("Verdana", 0, 14));

        acctCreatedLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        acctCreatedLabel.setForeground(new java.awt.Color(255, 0, 0));

        newAccountButton.setFont(new java.awt.Font("Verdana", 1, 14));
        newAccountButton.setText("Create New Account");
        newAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAccountButtonActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel30.setText("Class:");

        addSSelectRecent.setBackground(new java.awt.Color(255, 255, 204));
        addSSelectRecent.setFont(new java.awt.Font("Verdana", 0, 14));
        addSSelectRecent.setText("Select the most recently created class, OR");

        addSSelectManual.setBackground(new java.awt.Color(255, 255, 204));
        addSSelectManual.setFont(new java.awt.Font("Verdana", 0, 14));
        addSSelectManual.setText("Select the class based on class number and school term");

        jLabel31.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel31.setText("Class Number:");

        addAClassNum.setFont(new java.awt.Font("Verdana", 0, 14));
        addAClassNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No. 1", "No. 2", "No. 3", "No. 4", "No. 5" }));

        jLabel32.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel32.setText("School Term:");

        addSSchoolSeason.setFont(new java.awt.Font("Verdana", 0, 14));
        addSSchoolSeason.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Spring", "Summer", "Fall", "Winter" }));

        addSSchoolYear.setFocusable(false);

        org.jdesktop.layout.GroupLayout jPanel16Layout = new org.jdesktop.layout.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(64, 64, 64)
                        .add(studentRadio)
                        .add(18, 18, 18)
                        .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(newAcctFirstName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .add(newAcctLastName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .add(adminRadio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(128, 128, 128)
                        .add(jLabel31)
                        .add(18, 18, 18)
                        .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(addSSchoolYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(addAClassNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(45, 45, 45)
                        .add(jLabel32)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(addSSchoolSeason, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(97, Short.MAX_VALUE))
            .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel16Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel16Layout.createSequentialGroup()
                            .add(jLabel11)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 517, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel16Layout.createSequentialGroup()
                            .add(53, 53, 53)
                            .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jLabel13)
                                .add(jLabel10)
                                .add(newAccountButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jPanel16Layout.createSequentialGroup()
                                    .add(jLabel30)
                                    .add(18, 18, 18)
                                    .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(addSSelectManual)
                                        .add(addSSelectRecent)
                                        .add(jPanel16Layout.createSequentialGroup()
                                            .add(204, 204, 204)
                                            .add(acctCreatedLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)))))))
                    .addContainerGap()))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel16Layout.createSequentialGroup()
                .add(78, 78, 78)
                .add(newAcctFirstName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(13, 13, 13)
                .add(newAcctLastName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(40, 40, 40)
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(84, 84, 84)
                        .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel31, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, addSSchoolYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel16Layout.createSequentialGroup()
                        .add(83, 83, 83)
                        .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel32)
                            .add(addSSchoolSeason, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .add(addAClassNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(197, 197, 197))
            .add(jPanel16Layout.createSequentialGroup()
                .add(157, 157, 157)
                .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(adminRadio)
                    .add(studentRadio))
                .addContainerGap(300, Short.MAX_VALUE))
            .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel16Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jLabel11)
                    .add(37, 37, 37)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(18, 18, 18)
                    .add(jLabel13)
                    .add(63, 63, 63)
                    .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(addSSelectRecent)
                        .add(jLabel30))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                    .add(addSSelectManual)
                    .add(107, 107, 107)
                    .add(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(acctCreatedLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .add(newAccountButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(68, Short.MAX_VALUE)))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel16, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Create New Accounts", jPanel2);

        jPanel5.setBackground(new java.awt.Color(255, 255, 204));

        accountPane.setBackground(new java.awt.Color(255, 255, 232));

        jPanel3.setBackground(new java.awt.Color(255, 255, 232));

        studentList.setFont(new java.awt.Font("Verdana", 0, 14));
        studentList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Please select a class first." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        studentList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentListMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(studentList);

        classList.setFont(new java.awt.Font("Verdana", 0, 12));
        classList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        classList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classListMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(classList);

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel33.setText("Classes:");

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel34.setText("Students:");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel33))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel34)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel33)
                    .add(jLabel34))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane5)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                .addContainerGap())
        );

        accountPane.addTab("Students", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 232));

        adminList.setFont(new java.awt.Font("Verdana", 0, 14));
        adminList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(adminList);

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel35.setText("Administrators:");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
                    .add(jLabel35))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .add(jLabel35)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        accountPane.addTab("Administrators", jPanel4);

        disableAccount.setFont(new java.awt.Font("Tahoma", 1, 12));
        disableAccount.setText("Disable Account");
        disableAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableAccountActionPerformed(evt);
            }
        });

        acctDisabledLabel.setFont(new java.awt.Font("Verdana", 1, 12));
        acctDisabledLabel.setForeground(new java.awt.Color(255, 0, 0));

        jLabel16.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel16.setText("Manage Existing Accounts");

        enableAccount.setFont(new java.awt.Font("Tahoma", 1, 12));
        enableAccount.setText("Enable Account");
        enableAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableAccountActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel16))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
                        .add(34, 34, 34)
                        .add(disableAccount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(28, 28, 28)
                        .add(enableAccount, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .add(55, 55, 55)
                        .add(acctDisabledLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 333, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(accountPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 714, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel16)
                .add(14, 14, 14)
                .add(accountPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 376, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(21, 21, 21)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(disableAccount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(enableAccount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(acctDisabledLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Existing Accounts", jPanel5);

        jPanel15.setBackground(new java.awt.Color(255, 255, 204));

        jPanel22.setBackground(new java.awt.Color(255, 255, 204));

        jLabel60.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel60.setText("Change Student Passwords");

        jPanel20.setBackground(new java.awt.Color(255, 255, 204));

        userNameField.setFont(new java.awt.Font("Verdana", 0, 14));

        newStudentPassword1Field.setFont(new java.awt.Font("Verdana", 0, 14));

        newStudentPassword2Field.setFont(new java.awt.Font("Verdana", 0, 14));

        jLabel57.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel57.setText("Re-Enter New Password:");

        jLabel58.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel58.setText("Enter New Password:");

        jLabel61.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel61.setText("Enter User Name:");

        org.jdesktop.layout.GroupLayout jPanel20Layout = new org.jdesktop.layout.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel20Layout.createSequentialGroup()
                .addContainerGap(229, Short.MAX_VALUE)
                .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, userNameField)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, newStudentPassword1Field)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, newStudentPassword2Field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                .addContainerGap())
            .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel20Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel61)
                        .add(jLabel57)
                        .add(jLabel58))
                    .addContainerGap(195, Short.MAX_VALUE)))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .add(userNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(newStudentPassword1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(newStudentPassword2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
            .add(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel20Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jLabel61)
                    .add(18, 18, 18)
                    .add(jLabel58)
                    .add(18, 18, 18)
                    .add(jLabel57)
                    .addContainerGap(29, Short.MAX_VALUE)))
        );

        changeStudentPassword.setFont(new java.awt.Font("Verdana", 1, 14));
        changeStudentPassword.setText("Change Password");
        changeStudentPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeStudentPasswordActionPerformed(evt);
            }
        });

        changeStudentPasswordLabel.setFont(new java.awt.Font("Verdana", 0, 14));

        org.jdesktop.layout.GroupLayout jPanel22Layout = new org.jdesktop.layout.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel22Layout.createSequentialGroup()
                .add(jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel60)
                    .add(jPanel22Layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel22Layout.createSequentialGroup()
                                .add(8, 8, 8)
                                .add(changeStudentPassword)
                                .add(50, 50, 50)
                                .add(changeStudentPasswordLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 420, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel22Layout.createSequentialGroup()
                .add(jLabel60)
                .add(18, 18, 18)
                .add(jPanel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(changeStudentPasswordLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, changeStudentPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(256, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel15Layout = new org.jdesktop.layout.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel22, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel22, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Change Student Password", jPanel15);

        org.jdesktop.layout.GroupLayout acc_panelLayout = new org.jdesktop.layout.GroupLayout(acc_panel);
        acc_panel.setLayout(acc_panelLayout);
        acc_panelLayout.setHorizontalGroup(
            acc_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(acc_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 768, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        acc_panelLayout.setVerticalGroup(
            acc_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(acc_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 534, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPane.addTab("Management", acc_panel);

        week_log_panel.setBackground(new java.awt.Color(255, 255, 153));
        week_log_panel.setName("weeklyLogTab"); // NOI18N

        jLabel36.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel36.setText("View / Modify / Approve Submitted Weekly Logs");

        jPanel11.setBackground(new java.awt.Color(255, 255, 153));

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 16));
        jLabel18.setText("Classes:");

        admin_log_class_list.setFont(new java.awt.Font("Verdana", 0, 14));
        admin_log_class_list.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        admin_log_class_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                admin_log_class_listMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(admin_log_class_list);

        admin_log_student_list.setFont(new java.awt.Font("Verdana", 0, 14));
        admin_log_student_list.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Please select a class." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        admin_log_student_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                admin_log_student_listMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(admin_log_student_list);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 16));
        jLabel2.setText("Student Names:");

        jLabel17.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        jLabel17.setText("Weekly Logs:");

        admin_log_log_list.setFont(new java.awt.Font("Verdana", 0, 14));
        admin_log_log_list.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Please select a student." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        admin_log_log_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                admin_log_log_listMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(admin_log_log_list);

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel18)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 266, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                    .add(jLabel17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(jLabel2)
                    .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout week_log_panelLayout = new org.jdesktop.layout.GroupLayout(week_log_panel);
        week_log_panel.setLayout(week_log_panelLayout);
        week_log_panelLayout.setHorizontalGroup(
            week_log_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(week_log_panelLayout.createSequentialGroup()
                .add(week_log_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(week_log_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel36))
                    .add(week_log_panelLayout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        week_log_panelLayout.setVerticalGroup(
            week_log_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(week_log_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel36)
                .add(18, 18, 18)
                .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPane.addTab("Weekly Logs", week_log_panel);

        coop_panel.setBackground(new java.awt.Color(255, 255, 153));
        coop_panel.setName("coopTab"); // NOI18N

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 204));

        jPanel6.setBackground(new java.awt.Color(255, 255, 204));

        addPostings.setFont(new java.awt.Font("Verdana", 0, 14));
        addPostings.setText("Add Postings");
        addPostings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPostingsActionPerformed(evt);
            }
        });

        clearAll.setFont(new java.awt.Font("Verdana", 0, 14));
        clearAll.setText("Clear All");
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        addRows.setFont(new java.awt.Font("Verdana", 0, 14));
        addRows.setText("Add 10 Rows");
        addRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowsActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel14.setText("Add Co-op Job Postings");

        coopEntryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(coopEntryTable);

        jobAdded.setFont(new java.awt.Font("Verdana", 0, 14));

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel14)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel6Layout.createSequentialGroup()
                        .add(addRows)
                        .add(18, 18, 18)
                        .add(clearAll)
                        .add(18, 18, 18)
                        .add(addPostings)
                        .add(41, 41, 41)
                        .add(jobAdded, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel14)
                .add(18, 18, 18)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 356, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(addRows)
                        .add(clearAll)
                        .add(addPostings))
                    .add(jobAdded, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Add Co-op Job Postings", jPanel6);

        jPanel7.setBackground(new java.awt.Color(255, 255, 204));

        jLabel15.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel15.setText("Search / Update Co-op Job Postings");

        coopSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(coopSearchTable);

        jLabel37.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel37.setText("Search By:");

        searchCombo1.setFont(new java.awt.Font("Verdana", 0, 14));
        searchCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Year:", "Business:", "Location:", "Activity:" }));

        searchCombo2.setFont(new java.awt.Font("Verdana", 0, 14));
        searchCombo2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Year:", "Business:", "Location:", "Activity:" }));

        searchText1.setFont(new java.awt.Font("Verdana", 0, 14));

        searchText2.setFont(new java.awt.Font("Verdana", 0, 14));

        andOR.setFont(new java.awt.Font("Verdana", 0, 14));
        andOR.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OR", "AND" }));

        jLabel38.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel38.setText("Order By:");

        orderCombo.setFont(new java.awt.Font("Verdana", 0, 14));
        orderCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Year", "Business", "Location", "Activity", "Contact" }));

        searchCoop.setFont(new java.awt.Font("Verdana", 1, 14));
        searchCoop.setText("Search");
        searchCoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCoopActionPerformed(evt);
            }
        });

        updateRows.setFont(new java.awt.Font("Verdana", 1, 14));
        updateRows.setText("Update Selected Rows");
        updateRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRowsActionPerformed(evt);
            }
        });

        rowsUpdated.setFont(new java.awt.Font("Verdana", 0, 14));

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel15)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(updateRows)
                        .add(39, 39, 39)
                        .add(rowsUpdated, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel7Layout.createSequentialGroup()
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel37)
                                    .add(jLabel38))
                                .add(18, 18, 18)
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel7Layout.createSequentialGroup()
                                        .add(searchCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(searchText1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(andOR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(searchCombo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(10, 10, 10)
                                        .add(searchText2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                                    .add(jPanel7Layout.createSequentialGroup()
                                        .add(orderCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(searchCoop)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 436, Short.MAX_VALUE))))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 706, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(299, 299, 299)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel15)
                .add(18, 18, 18)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(searchText1)
                    .add(searchCombo1)
                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel37)
                        .add(andOR)
                        .add(searchCombo2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                        .add(searchText2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel38)
                    .add(orderCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchCoop))
                .add(18, 18, 18)
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 273, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(updateRows)
                    .add(rowsUpdated, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(28, 28, 28))
        );

        jTabbedPane2.addTab("Search / Update Co-op Job Postings", jPanel7);

        org.jdesktop.layout.GroupLayout coop_panelLayout = new org.jdesktop.layout.GroupLayout(coop_panel);
        coop_panel.setLayout(coop_panelLayout);
        coop_panelLayout.setHorizontalGroup(
            coop_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(coop_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 755, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        coop_panelLayout.setVerticalGroup(
            coop_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(coop_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 506, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        mainPane.addTab("Co-op Info", coop_panel);

        report_panel.setBackground(new java.awt.Color(255, 255, 153));
        report_panel.setName("reportTab"); // NOI18N

        jPanel18.setBackground(new java.awt.Color(255, 255, 204));

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel4.setText("Weekly Log / Sheet Submission Summary");

        submissionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(submissionTable);

        jLabel5.setFont(new java.awt.Font("Verdana", 1, 14));
        jLabel5.setText("Select a class:");

        submissionClass.setFont(new java.awt.Font("Verdana", 0, 12));
        submissionClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submissionClassActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel18Layout = new org.jdesktop.layout.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel18Layout.createSequentialGroup()
                .add(jPanel18Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel18Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4))
                    .add(jPanel18Layout.createSequentialGroup()
                        .add(40, 40, 40)
                        .add(jPanel18Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 694, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel18Layout.createSequentialGroup()
                                .add(jLabel5)
                                .add(34, 34, 34)
                                .add(submissionClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 277, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .add(27, 27, 27))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .add(18, 18, 18)
                .add(jPanel18Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(submissionClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 381, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Weekly Log / Sheet Submission Summary", jPanel18);

        org.jdesktop.layout.GroupLayout report_panelLayout = new org.jdesktop.layout.GroupLayout(report_panel);
        report_panel.setLayout(report_panelLayout);
        report_panelLayout.setHorizontalGroup(
            report_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(report_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 766, Short.MAX_VALUE)
                .addContainerGap())
        );
        report_panelLayout.setVerticalGroup(
            report_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(report_panelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPane.addTab("Reports", report_panel);

        personal_panel.setBackground(new java.awt.Color(255, 255, 153));
        personal_panel.setName("personalTab"); // NOI18N

        jPanel13.setBackground(new java.awt.Color(255, 255, 153));

        jLabel8.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel8.setText("Change Password");

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel9.setText("Enter Old Password:");

        jLabel47.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel47.setText("Enter New Password:");

        jLabel48.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel48.setText("Re-Enter New Password:");

        changePassword.setFont(new java.awt.Font("Verdana", 1, 14));
        changePassword.setText("Change Password");
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });

        changePasswordLabel.setFont(new java.awt.Font("Verdana", 0, 14));

        oldPasswordField.setFont(new java.awt.Font("Verdana", 0, 14));

        newPassword1Field.setFont(new java.awt.Font("Verdana", 0, 14));

        newPassword2Field.setFont(new java.awt.Font("Verdana", 0, 14));

        org.jdesktop.layout.GroupLayout jPanel13Layout = new org.jdesktop.layout.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel13Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel8))
                    .add(jPanel13Layout.createSequentialGroup()
                        .add(36, 36, 36)
                        .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel9)
                            .add(jLabel47)
                            .add(jLabel48)
                            .add(changePassword))
                        .add(24, 24, 24)
                        .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(changePasswordLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 360, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, oldPasswordField)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, newPassword1Field)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, newPassword2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 141, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .add(18, 18, 18)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(oldPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel47)
                    .add(newPassword1Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel48)
                    .add(newPassword2Field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(changePasswordLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, changePassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .add(350, 350, 350))
        );

        org.jdesktop.layout.GroupLayout personal_panelLayout = new org.jdesktop.layout.GroupLayout(personal_panel);
        personal_panel.setLayout(personal_panelLayout);
        personal_panelLayout.setHorizontalGroup(
            personal_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        personal_panelLayout.setVerticalGroup(
            personal_panelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        mainPane.addTab("Personal Info", personal_panel);

        exit.setFont(new java.awt.Font("Verdana", 1, 14));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        home_logout_button.setFont(new java.awt.Font("Verdana", 1, 14));
        home_logout_button.setText("Log Out");
        home_logout_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home_logout_buttonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(mv_icon)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 407, Short.MAX_VALUE)
                .add(home_logout_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(exit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(19, 19, 19))
            .add(mainPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(mv_icon)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(exit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(home_logout_button, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(27, 27, 27)))
                .add(mainPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainPaneStateChanged
        changeTab();
    }//GEN-LAST:event_mainPaneStateChanged

    private void newAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAccountButtonActionPerformed
        
        /* get the first name and the last name*/
        String firstName = this.newAcctFirstName.getText();
        String lastName = this.newAcctLastName.getText();

        if (firstName.length() == 0){
            this.acctCreatedLabel.setText("Please enter the First Name.");
            this.acctCreatedLabel.setForeground(Color.red);
            return;
        }

        if (lastName.length() == 0) {
            this.acctCreatedLabel.setText("Please enter the Last Name.");
            this.acctCreatedLabel.setForeground(Color.red);
            return;
        }
        
        String userName = lastName.toLowerCase()
                + firstName.substring(0, 2).toLowerCase();

        String predicate = "first_name = '" + firstName
                + "' AND last_name = '" + lastName + "'";
        List<MvPerson> personList =
                    mvApp.selectEntitiesBy(MvPerson.class, predicate);
        if (!(personList.isEmpty())){
            this.acctCreatedLabel.setText("Such User Already Exists.");
            this.acctCreatedLabel.setForeground(Color.red);
            return;
        }
        
        String confirm = new String();
        MvClass mvClass = null;
        
        if (this.studentRadio.isSelected()){
            if (this.addSSelectRecent.isSelected()){
                String maxID = "id = (select max(id) from mv_class)";
                List<MvClass> classes =
                        mvApp.selectEntitiesBy(MvClass.class, maxID);
                mvClass = classes.get(0);
            } else if (this.addSSelectManual.isSelected()){
                int class_num = addAClassNum.getSelectedIndex() + 1;
                int class_year = addSSchoolYear.getYear();
                String class_season = (String)addSSchoolSeason.getSelectedItem();
                String school_term = class_year + " " + class_season;
                String pickClass = "class_number = '" + class_num +
                        "' AND term = '" + school_term + "'";
                List<MvClass> classes =
                        mvApp.selectEntitiesBy(MvClass.class, pickClass);
                if (classes.size() == 0){
                    acctCreatedLabel.setText("Such class does not exist.");
                    this.acctCreatedLabel.setForeground(Color.red);
                    return;
                } else {
                    mvClass = classes.get(0);
                }
            }
            
            String class_num = Integer.toString(mvClass.getClassNumber());
            String school_term = mvClass.getTerm();

            confirm = "Do you want to create the following user to" +
                    " class " + class_num  + ", " + school_term +
                    "?\n" + "First Name: " + firstName + "\n" +
                    "Last Name: " + lastName + "\n" +
                    "User Type: Student";
        } else {
            confirm = "Do you want to create the following user?\n" +
                    "First Name: " + firstName + "\n" +
                    "Last Name: " + lastName + "\n" +
                    "User Type: Admin";
        }
        
        int selection = JOptionPane.showConfirmDialog(null,
                confirm, "Confirmation", 0);
        if (selection == 1){
            return;
        }

        String group_type = new String();
        if (this.studentRadio.isSelected()){
            group_type = "2";
        } else if (this.adminRadio.isSelected()){
            group_type = "3";
        }

        /* retrieve the specified row in table mv_person_group */
        String predicate1 = "id = " + group_type;
        List<MvPersonGroup> rl =
                mvApp.selectEntitiesBy(MvPersonGroup.class, predicate1);
        MvPersonGroup mvPG = rl.get(0);

        /* create a new mvAddress object */
        MvAddress mvAddress = new MvAddress();
        mvAddress.setAddressLine1("Enter your address here.");
        mvAddress.setCity("Enter your city here.");
        mvAddress.setProvince("Ontario");
        mvAddress.setCountry("Canada");
        mvAddress.setPostalCode("Enter your Postal Code here.");
        
        /* insert the mvAddress into the table */
        mvApp.MvAddressController.create(mvAddress);

        /* create a new mvPerson object */
        MvPerson mvPerson = new MvPerson();
        mvPerson.setFirstName(firstName);
        mvPerson.setLastName(lastName);
        mvPerson.setDateBirth(new Date());
        mvPerson.setEmail("email@gmail.com");
        mvPerson.setPersonGroupId(mvPG);
        mvPerson.setAddressId(mvAddress);

        /* insert the mvPerson into the table */
        mvApp.MvPersonController.create(mvPerson);
        mvPG.getMvPersonCollection().add(mvPerson);
        mvAddress.getMvPersonCollection().add(mvPerson);
        try {
            mvApp.MvAddressController.edit(mvAddress);
            mvApp.MvPersonGroupController.edit(mvPG);
        } catch (IllegalOrphanException ex) {
            Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* create a new mvUser object */
        MvUser mvuser = new MvUser();
        mvuser.setUserName(userName);
        mvuser.setUserPassword("jjjjjj");
        mvuser.setActive(true);
        mvuser.setDateCreated(new Date());
        mvuser.setMvPersonId(mvPerson);

        /* insert the mvUser into the table */
        mvApp.MvUserController.create(mvuser);
        mvPerson.getMvUserCollection().add(mvuser);
        try {
            mvApp.MvPersonController.edit(mvPerson);
        } catch (IllegalOrphanException ex) {
            Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (this.studentRadio.isSelected()){
            /* create a new mvEnrollment object */
            MvEnrollment mvEnroll = new MvEnrollment();
            mvEnroll.setStudentId(mvPerson);
            mvEnroll.setClassId(mvClass);
            mvEnroll.setUniqueCoopHour(mvClass.getRequiredCoopHours());

            /* insert the mvEnroll into the table */
            mvApp.MvEnrollmentController.create(mvEnroll);
            mvClass.getMvEnrollmentCollection().add(mvEnroll);
            mvPerson.getMvEnrollmentCollection().add(mvEnroll);
            try {
                mvApp.MvPersonController.edit(mvPerson);
                mvApp.MvClassController.edit(mvClass);
            } catch (IllegalOrphanException ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.acctCreatedLabel.setText("Student Account" +
                    " Successfully Created.");
            this.acctCreatedLabel.setForeground(Color.green);
        } else if (this.adminRadio.isSelected()){
            this.acctCreatedLabel.setText("Admin Account" +
                    " Successfully Created.");
            this.acctCreatedLabel.setForeground(Color.green);
        }
        
        prepareAccountTab();

    }//GEN-LAST:event_newAccountButtonActionPerformed

    private void disableAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableAccountActionPerformed
        int student = this.studentList.getSelectedIndex();
        int admin = this.adminList.getSelectedIndex();

        // if nothing is selected, warn user to select an account
        if (student == -1 && admin == -1){
            this.acctDisabledLabel.setText("Please select an account.");
            this.acctDisabledLabel.setForeground(Color.red);
        } else {
            // otherwise, get the account type and
            // parse the names in the textfield
            String fullName = new String();
            if (student != -1){
                fullName = (String) this.studentList.getSelectedValue();
                if (fullName.equals("Please select a class first.")){
                    this.acctDisabledLabel.setText("Please select a class.");
                    this.acctDisabledLabel.setForeground(Color.red);
                    String[] listData = {"Please select a class first."};
                    this.studentList.setListData(listData);
                    return;
                }
                if (fullName.equals("There is currently students enrolled" +
                        " in this class.")){
                    this.acctDisabledLabel.setText("Please select a class.");
                    this.acctDisabledLabel.setForeground(Color.red);
                    String[] listData = {"Please select a class first."};
                    this.studentList.setListData(listData);
                    return;
                }
            } else if (admin != -1) {
                fullName = (String) this.adminList.getSelectedValue();
            }
            String[] parsedName = fullName.split(" ");
            String firstName = parsedName[0];
            String lastName = parsedName[1];

            String predicate1 = " first_name = '" + firstName
                    + "' AND last_name = '" + lastName + "'";
            List<MvPerson> rl = mvApp.selectEntitiesBy(MvPerson.class, predicate1);
            MvPerson mvPerson = rl.get(0);

            // get the selected person's id
            int ID = mvPerson.getId();

            // disable the selected person
            String predicate2 = " mv_person_id = " + ID;
            List<MvUser> r2 = mvApp.selectEntitiesBy(MvUser.class, predicate2);
            MvUser mvUser = r2.get(0);
            mvUser.setActive(false);

            // execute edition in the database
            try {
                mvApp.MvUserController.edit(mvUser);
            } catch (IllegalOrphanException ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE,
                                                                    null, ex);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE,
                                                                    null, ex);
            } catch (Exception ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE,
                                                                    null, ex);
            }

            if (student != -1){
                updateStudentList();
            }

            // update information on the account page
            prepareAccountTab();

            // display success message
            this.acctDisabledLabel.setText("Account successfully disabled.");
            this.acctDisabledLabel.setForeground(Color.green);
        }
    }//GEN-LAST:event_disableAccountActionPerformed

    private void home_logout_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home_logout_buttonActionPerformed
        this.setVisible(false);
        LoginUI ui = new LoginUI(new Application());
        ui.setVisible(true);
    }//GEN-LAST:event_home_logout_buttonActionPerformed

    private void create_classActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_classActionPerformed
        int class_num = classNum.getSelectedIndex() + 1;

        int class_year = classYear.getYear();
        String class_season = (String)classSeason.getSelectedItem();
        String school_term = class_year + " " + class_season;

        String str_hrs = reqCoopHrs.getText();
        String className = this.classNameField.getText();

        if (className.equals("")){
            this.classCreatedLabel.setText("Please enter a " +
                                           "class name.");
            this.classCreatedLabel.setForeground(Color.red);
            return;
        }

        if (str_hrs.length() == 0){
            this.classCreatedLabel.setText("Please enter a " +
                                           "positive co-op hour.");
            this.classCreatedLabel.setForeground(Color.red);
        } else {
            try {
                int coop_hrs = Integer.parseInt(str_hrs);
                if (coop_hrs <= 0){
                    this.classCreatedLabel.setText("Please enter a " +
                                                   "positive co-op hour.");
                    this.classCreatedLabel.setForeground(Color.red);
                } else {
                    String predicate = "class_number = '" + class_num +
                            "' AND term = '" + school_term + "'";
                    List<MvClass> classesList =
                            mvApp.selectEntitiesBy(MvClass.class, predicate);
                    if (classesList.size() == 0){
                        String confirm = "Do you want to create" +
                                " the following class?\n" +
                                "Class Number: " + class_num + "\n" +
                                "School Term: " + school_term + "\n" +
                                "Required Co-op Hours: " + coop_hrs;
                        int selection = JOptionPane.showConfirmDialog(null,
                                confirm, "Confirmation", 0);
                        if (selection == 0){
                            MvClass mvClass = new MvClass();
                            mvClass.setClassName(className);
                            mvClass.setClassNumber(class_num);
                            mvClass.setTerm(school_term);
                            mvClass.setRequiredCoopHours(coop_hrs);
                            mvApp.MvClassController.create(mvClass);
                            this.classCreatedLabel.setText("Class " +
                                    "Successfully Created.");
                            this.classCreatedLabel.setForeground(Color.green);
                        } 
                    } else {
                            this.classCreatedLabel.setText("Such class " +
                                    "already exists.");
                            this.classCreatedLabel.setForeground(Color.red);
                    }
                }
            } catch (Exception ex) {
                this.classCreatedLabel.setText("Please enter a " +
                                               "positive co-op hour.");
                this.classCreatedLabel.setForeground(Color.red);
            }
        }
        prepareAccountTab();
    }//GEN-LAST:event_create_classActionPerformed

    private String convertDate(Date date){
        String strDate = date.toString();
        String[] parseDate = strDate.split(" ");

        String year = parseDate[5];

        String month = parseDate[1];
        if (month.equals("Jan")){
            month = "01";
        } else if (month.equals("Feb")){
            month = "02";
        } else if (month.equals("Mar")){
            month = "03";
        } else if (month.equals("Apr")){
            month = "04";
        } else if (month.equals("May")){
            month = "05";
        } else if (month.equals("Jun")){
            month = "06";
        } else if (month.equals("Jul")){
            month = "07";
        } else if (month.equals("Aug")){
            month = "08";
        } else if (month.equals("Sep")){
            month = "09";
        } else if (month.equals("Oct")){
            month = "10";
        } else if (month.equals("Nov")){
            month = "11";
        } else {
            month = "12";
        }

        String day = parseDate[2];

        String converted = year + "-" + month + "-" + day;

        return converted;
    }

    private void addWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWeekActionPerformed
        MvClass mvClass = null;

        if (this.selectRecent.isSelected()){
            String maxID = "id = (select max(id) from mv_class)";
            List<MvClass> classes =
                    mvApp.selectEntitiesBy(MvClass.class, maxID);
            mvClass = classes.get(0);
        } else if (this.selectManual.isSelected()){
            int class_num = selectClassNum.getSelectedIndex() + 1;
            int class_year = selectSchoolYear.getYear();
            String class_season = (String)selectSchoolSeason.getSelectedItem();
            String school_term = class_year + " " + class_season;
            String pickClass = "class_number = '" + class_num +
                            "' AND term = '" + school_term + "'";
            List<MvClass> classes =
                            mvApp.selectEntitiesBy(MvClass.class, pickClass);
            if (classes.size() == 0){
                weekAddedLabel.setText("Such class does not exist.");
                weekAddedLabel.setForeground(Color.red);
                return;
            } else {
                mvClass = classes.get(0);
            }
        }

        String week_num = Integer.toString(weekNum.getSelectedIndex() + 1);
        Date startDate = weekStart.getDate();
        Date endDate = weekEnd.getDate();
        Date dueDate = weekDueDate.getDate();

        if ((startDate == null) || (endDate == null) || (dueDate == null)){
            weekAddedLabel.setText("Please select start, end, and due dates.");
            weekAddedLabel.setForeground(Color.red);
            return;
        }

        String start_date = convertDate(startDate);
        String end_date = convertDate(endDate);
        String due_date = convertDate(dueDate);

        int classID =  mvClass.getId();
        String findStart = "first_day = '" + start_date +
                "' AND class_id = " + classID;
        String findEnd = "last_day = '" + end_date +
                "' AND class_id = " + classID;
        String findDue =  "due_date = '" + due_date +
                "' AND class_id = " + classID;
        String findWeek = "class_id = " + classID +
                " AND week_number = '" + week_num + "'";


        List<MvWeek> weekList1 = mvApp.selectEntitiesBy(MvWeek.class, findStart);
        List<MvWeek> weekList2 = mvApp.selectEntitiesBy(MvWeek.class, findEnd);
        List<MvWeek> weekList3 = mvApp.selectEntitiesBy(MvWeek.class, findWeek);
        List<MvWeek> weekList5 = mvApp.selectEntitiesBy(MvWeek.class, findDue);

        if (!(weekList1.isEmpty())){
             weekAddedLabel.setText("Such Start Date already exists.");
             weekAddedLabel.setForeground(Color.red);
        } else if (!(weekList2.isEmpty())){
             weekAddedLabel.setText("Such End Date already exists.");
             weekAddedLabel.setForeground(Color.red);
        } else if (!(weekList5.isEmpty())){
             weekAddedLabel.setText("Such Due Date already exists.");
             weekAddedLabel.setForeground(Color.red);
        } else if (!(weekList3.isEmpty())){
            String findMaxWeek = "class_id = " + classID +
                " AND week_number = (select max(week_number) from mv_week " +
                "where class_id = " + classID + ")";
            List<MvWeek> weekList4 =
                    mvApp.selectEntitiesBy(MvWeek.class, findMaxWeek);
            MvWeek maxWeek = weekList4.get(0);
            String maxWeekNum = String.valueOf(maxWeek.getWeekNumber());
            
            weekAddedLabel.setText("Such week number already exists." +
                    " The most recent week number is " + maxWeekNum + ".");
            weekAddedLabel.setForeground(Color.red);
        } else {
            String class_num = Integer.toString(mvClass.getClassNumber());
            String school_term = mvClass.getTerm();
            String confirm = "Do you want to add the following week to" +
                                " class " + class_num  + ", " + school_term +
                                "?\n" + "Week Number: " + week_num + "\n" +
                                "Start Date: " + start_date + "\n" +
                                "End Date: " + end_date + "\n" +
                                "Due Date: " + due_date;
            int selection = JOptionPane.showConfirmDialog(null,
                    confirm, "Confirmation", 0);
            if (selection == 0){
                MvWeek mvWeek = new MvWeek();
                mvWeek.setFirstDay(startDate);
                mvWeek.setLastDay(endDate);
                mvWeek.setClassId(mvClass);
                mvWeek.setWeekNumber(Integer.parseInt(week_num));
                mvWeek.setDueDate(dueDate);
                String monStr = mon.getText();
                if (!monStr.equals("")){
                    mvWeek.setMon(monStr);
                }
                String tueStr = tue.getText();
                if (!tueStr.equals("")){
                    mvWeek.setTue(tueStr);
                }
                String wedStr = wed.getText();
                if (!wedStr.equals("")){
                    mvWeek.setWed(wedStr);
                }
                String thuStr = thu.getText();
                if (!thuStr.equals("")){
                    mvWeek.setThu(thuStr);
                }
                String friStr = fri.getText();
                if (!friStr.equals("")){
                    mvWeek.setFri(friStr);
                }
                String satStr = sat.getText();
                if (!satStr.equals("")){
                    mvWeek.setSat(satStr);
                }
                mvApp.MvWeekController.create(mvWeek);
                mvClass.getMvWeekCollection().add(mvWeek);
                try {
                    mvApp.MvClassController.edit(mvClass);
                } catch (IllegalOrphanException ex) {
                    Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NonexistentEntityException ex) {
                    Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                weekAddedLabel.setText("Week successfully added.");
                weekAddedLabel.setForeground(Color.green);
            }
        }
    }//GEN-LAST:event_addWeekActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        String confirm = "Are you sure that you want to exit?";
        int selection = JOptionPane.showConfirmDialog(null,
                confirm, "Confirmation", 0);
        if (selection == 1){
            return;
        }
        System.exit(1);
    }//GEN-LAST:event_exitActionPerformed

    private void enableAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableAccountActionPerformed
        int student = this.studentList.getSelectedIndex();
        int admin = this.adminList.getSelectedIndex();

        // if nothing is selected, warn user to select an account
        if (student == -1 && admin == -1){
            this.acctDisabledLabel.setText("Please select an account.");
            this.acctDisabledLabel.setForeground(Color.red);
        } else {
            // otherwise, get the account type and
            // parse the names in the textfield
            String fullName = new String();
            if (student != -1){
                fullName = (String) this.studentList.getSelectedValue();
                if (fullName.equals("Please select a class first.")){
                    this.acctDisabledLabel.setText("Please select a class.");
                    this.acctDisabledLabel.setForeground(Color.red);
                    String[] listData = {"Please select a class first."};
                    this.studentList.setListData(listData);
                    return;
                }
                if (fullName.equals("There is currently students enrolled" +
                        " in this class.")){
                    this.acctDisabledLabel.setText("Please select a class.");
                    this.acctDisabledLabel.setForeground(Color.red);
                    String[] listData = {"Please select a class first."};
                    this.studentList.setListData(listData);
                    return;
                }
            } else if (admin != -1) {
                fullName = (String) this.adminList.getSelectedValue();
            }
            String[] parsedName = fullName.split(" ");
            String firstName = parsedName[0];
            String lastName = parsedName[1];

            String selectPerson = " first_name = '" + firstName
                    + "' AND last_name = '" + lastName + "'";
            List<MvPerson> personList =
                    mvApp.selectEntitiesBy(MvPerson.class, selectPerson);
            MvPerson mvPerson = personList.get(0);

            // get the selected person's id
            int ID = mvPerson.getId();

            // disable the selected person
            String selectUser = " mv_person_id = " + ID;
            List<MvUser> userList =
                    mvApp.selectEntitiesBy(MvUser.class, selectUser);
            MvUser mvUser = userList.get(0);
            mvUser.setActive(true);

            // execute edition in the database
            try {
                mvApp.MvUserController.edit(mvUser);

//                System.out.println(mvUser.getActive());
//
//                System.out.println(".....");
//
//                String newSelectPerson = "first_name = '" + firstName
//                        + "'AND last_name = '" + lastName + "'";
//                List<MvPerson> newPersonList =
//                        mvApp.selectEntitiesBy(MvPerson.class, newSelectPerson);
//                MvPerson newMvPerson = newPersonList.get(0);
//
//                // get the selected person's id
//                int newID = newMvPerson.getId();
//
//                // disable the selected person
//                String newSelectUser = "mv_person_id = " + newID;
//                List<MvUser> newUserList =
//                        mvApp.selectEntitiesBy(MvUser.class, newSelectUser);
//                MvUser newMvUser = newUserList.get(0);
//                System.out.println(newMvUser.getActive());
//
//                System.out.println("------");

                if (student != -1){
                    updateStudentList();
                }

                // update information on the account page
                prepareAccountTab();

                // display success message
                this.acctDisabledLabel.setText("Account successfully enabled.");
                this.acctDisabledLabel.setForeground(Color.green);

            } catch (IllegalOrphanException ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE,
                                                                    null, ex);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE,
                                                                    null, ex);
            } catch (Exception ex) {
                Logger.getLogger(AdminUI.class.getName()).log(Level.SEVERE,
                                                                    null, ex);
            }
        }
    }//GEN-LAST:event_enableAccountActionPerformed

    private void updateStudentList(){
        String findClass = "class_number = " + this.curClassNumber +
                " AND term = '" + this.curClassTerm + "'";
        List<MvClass> classesList =
                mvApp.selectEntitiesBy(MvClass.class, findClass);
        MvClass mvClass = classesList.get(0);
        int classID = mvClass.getId();

        String selectStudent = "person_group_id = 2";
        List<MvPerson> personList1 =
                mvApp.selectEntitiesBy(MvPerson.class, selectStudent);
        String[] listStudents = new String[personList1.size()];
        int i = 0;
        for (MvPerson mvPerson : personList1){
            String selectEnroll = "student_id = " + mvPerson.getId();
            List<MvEnrollment> enrollList =
                    mvApp.selectEntitiesBy(MvEnrollment.class, selectEnroll);
            for (MvEnrollment mvEnrollment : enrollList){
                if (mvEnrollment.getClassId().getId() == classID){
                    String disabled = "";
                    String selectUser = "mv_person_id = " + mvPerson.getId();
                    List<MvUser> userList =
                            mvApp.selectEntitiesBy(MvUser.class, selectUser);
                    MvUser mvUser = userList.get(0);
                    if (mvUser.getActive() == false){
                        disabled = " - Account Disabled";
                    }
                    String name1 = mvPerson.getFirstName() + " "
                                + mvPerson.getLastName() + disabled;
                    listStudents[i] = name1;
                    i++;
                }
            }
        }
        if (i != 0){
            this.studentList.setListData(noNullArray(listStudents));
        } else {
            String[] dataList = {"There is currently students enrolled" +
                    " in this class."};
            this.studentList.setListData(dataList);
        }
    }

    private void classListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classListMouseClicked
        String className = (String)this.classList.getSelectedValue();

        String[] parsedHyphenName = className.split("-");
        String classSchoolTerm = parsedHyphenName[0];
        String classFancyNum = parsedHyphenName[1];
        String[] classNumberArray = classFancyNum.split(" ");
        String classNumber = classNumberArray[classNumberArray.length-1];
        this.curClassNumber = classNumber;
        this.curClassTerm = classSchoolTerm;

        String findClass = "class_number = " + classNumber + " AND term = '" +
                classSchoolTerm + "'";
        List<MvClass> classesList =
                mvApp.selectEntitiesBy(MvClass.class, findClass);
        MvClass mvClass = classesList.get(0);
        int classID = mvClass.getId();

        String selectStudent = "person_group_id = 2";
        List<MvPerson> personList1 =
                mvApp.selectEntitiesBy(MvPerson.class, selectStudent);
        String[] listStudents = new String[personList1.size()];
        int i = 0;
        for (MvPerson mvPerson : personList1){
            String selectEnroll = "student_id = " + mvPerson.getId();
            List<MvEnrollment> enrollList =
                    mvApp.selectEntitiesBy(MvEnrollment.class, selectEnroll);
            for (MvEnrollment mvEnrollment : enrollList){
                if (mvEnrollment.getClassId().getId() == classID){
                    String disabled = "";
                    String selectUser = "mv_person_id = " + mvPerson.getId();
                    List<MvUser> userList =
                            mvApp.selectEntitiesBy(MvUser.class, selectUser);
                    MvUser mvUser = userList.get(0);
                    if (mvUser.getActive() == false){
                        disabled = " - Account Disabled";
                    }
                    String name1 = mvPerson.getFirstName() + " "
                                + mvPerson.getLastName() + disabled;
                    listStudents[i] = name1;
                    i++;
                }
            }
        }
        if (i != 0){
            this.studentList.setListData(noNullArray(listStudents));
        } else {
            String[] dataList = {"There is currently students enrolled" +
                    " in this class."};
            this.studentList.setListData(dataList);
        }
    }//GEN-LAST:event_classListMouseClicked

    private void admin_log_class_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_admin_log_class_listMouseClicked
        if (this.admin_log_class_list.isSelectionEmpty()) {
            return;
        }

        if (this.admin_log_class_list.getSelectedValue() == null){
            return;
        }

        // update the information in the student list by selecting a class
        // get selected class number
        String className = (String)this.admin_log_class_list.getSelectedValue();

        String[] parsedHyphenName = className.split("-");
        String classSchoolTerm = parsedHyphenName[0];
        String classFancyNum = parsedHyphenName[1];
        String[] classNumberArray = classFancyNum.split(" ");
        String classNumber = classNumberArray[classNumberArray.length-1];

        String findClass = "class_number = " + classNumber + " AND term = '" +
                classSchoolTerm + "'";
        List<MvClass> classesList =
                mvApp.selectEntitiesBy(MvClass.class, findClass);
        MvClass mvClass = classesList.get(0);
        int classID = mvClass.getId();

        String select_class = "class_id = " + classID;
        this.curViewClassID = Integer.toString(classID);

        // append all student_id in a list student_id_list
        List<MvEnrollment> id_list =
                mvApp.selectEntitiesBy(MvEnrollment.class, select_class);
        String [] student_id_list = new String[id_list.size()];
        int i = 0;
        for (MvEnrollment mvenrollment : id_list) {
            String student_id = mvenrollment.getStudentId().getId().toString();
            student_id_list[i] = student_id;
            i++;
        }

        // append all student names in a list student_item_list
        String [] student_item_list = new String[id_list.size()];

        // assign entries in the list with student names
        for (int num = 0; num < id_list.size(); num++) {
                // student_id_list[num] is a particular student id
                String predicate = "id = " + student_id_list[num];
                List<MvPerson> person = mvApp.selectEntitiesBy(MvPerson.class, predicate);
                student_item_list[num] = person.get(0).getFirstName() +
                        " " + person.get(0).getLastName();
        }

        // update the list on the screen
        this.admin_log_student_list.setListData(noNullArray(student_item_list));
    }//GEN-LAST:event_admin_log_class_listMouseClicked

    private void admin_log_student_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_admin_log_student_listMouseClicked
        if (this.admin_log_student_list.isSelectionEmpty()) {
            return;
        }

        if (this.admin_log_student_list.getSelectedValue() == null){
            return;
        }

        String select_name =
                this.admin_log_student_list.getSelectedValue().toString();
        String[] parsed_name = select_name.split(" ");

        if (parsed_name[0].equals("Please")){
            return;
        }

        String fname = parsed_name[0];
        String lname = parsed_name[1];
        this.curViewFirstName = fname;
        this.curViewLastName = lname;

        // retrieve that selected student's data
        String select_name_predicate =
                " first_name = '" + fname+ "' AND last_name = '" + lname + "'";
        List<MvPerson> person =
                mvApp.selectEntitiesBy(MvPerson.class, select_name_predicate);
        MvPerson mv_person = person.get(0);

        // retrieve the student's id
        String select_person_predicate =
                "mv_person_id = " + mv_person.getId().toString();
        List <MvUser> user_list =
                mvApp.selectEntitiesBy(MvUser.class, select_person_predicate);
        MvUser mv_user = user_list.get(0);

        String student_id = mv_user.getId().toString();
        String predicate = "mv_student_id = " + student_id;

        // retrieve all the weekly logs of that student's
        List<MvWeeklyLog> log_list =
                mvApp.selectEntitiesBy(MvWeeklyLog.class, predicate);

        String findWeeks = "class_id = " +
                this.curViewClassID + " order by week_number";
        List<MvWeek> weekList =
                mvApp.selectEntitiesBy(MvWeek.class, findWeeks);

        String[] listItems = new String[weekList.size()];
        int i = 1;
        for (MvWeek oneMvWeek : weekList){
            String status = "Not Yet Submitted";
            for (MvWeeklyLog oneLog : log_list){
                if (oneLog.getWeekId().getId().equals(oneMvWeek.getId())){
                    if (oneLog.getApprovedId() != null){
                        status = "Approved";
                    } else if (oneLog.getDisapprovedId() != null) {
                        status = "Disapproved";
                    } else {
                        status = "Not Yet Approved";
                    }
                }
            }
            listItems[i-1] = "Week No. " + i + " - " + status;
            i++;
        }
        this.admin_log_log_list.setListData(listItems);
    }//GEN-LAST:event_admin_log_student_listMouseClicked

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        
        String confirm = "Do you want to clear all the information entered?";
        int selection = JOptionPane.showConfirmDialog(null,
                confirm, "Confirmation", 0);
        if (selection == 1){
            return;
        }

        this.coopEntryTable.selectAll();

        for (int i = 0; i < 10; i++){
            for (int j = 0; j < 6; j++){
                this.coopEntryTable.setValueAt("", i, j);
            }
        }
    }//GEN-LAST:event_clearAllActionPerformed

    private void addPostingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPostingsActionPerformed
        this.coopEntryTable.selectAll();

        String confirm = "Do you want to add all the job postings entered" +
                " into the database?";
        int selection = JOptionPane.showConfirmDialog(null,
                confirm, "Confirmation", 0);
        if (selection == 1){
            return;
        }

        ArrayList<Integer> notFilled = new ArrayList();
        boolean hasEmpty;
        int count;

        for (int i = 0; i < this.coopEntryTable.getRowCount(); i++){
            hasEmpty = false;
            count = 0;
            for (int j = 0; j < 6; j++){
                if (this.coopEntryTable.getValueAt(i, j) == ""){
                    hasEmpty = true;
                    count++;
                }
            }
            if (hasEmpty == true){
                if (count < 6){
                    notFilled.add(i);
                }
            } else {
                MvCoop mvCoop = new MvCoop();
                mvCoop.setYearNumber((String)this.coopEntryTable.getValueAt(i, 0));
                mvCoop.setBusiness((String)this.coopEntryTable.getValueAt(i, 1));
                mvCoop.setLocation((String)this.coopEntryTable.getValueAt(i, 2));
                mvCoop.setActivity((String)this.coopEntryTable.getValueAt(i, 3));
                mvCoop.setContact((String)this.coopEntryTable.getValueAt(i, 4));
                mvCoop.setPhone((String)this.coopEntryTable.getValueAt(i, 5));
                mvApp.MvCoopController.create(mvCoop);
            }
        }

        if (notFilled.isEmpty()){
            for (int i = 0; i < this.coopEntryTable.getRowCount(); i++){
                for (int j = 0; j < 6; j++){
                    this.coopEntryTable.setValueAt("", i, j);
                }
            }
            this.jobAdded.setText("All job postings successfully added.");
            this.jobAdded.setForeground(Color.GREEN);
        } else {
            JOptionPane.showMessageDialog(null, "There are job postings that " +
                    "are not completely filled out.\n You can enter 'N/A' for" +
                    " entries with information that is not available " +
                    "at the moment.\n Job postings with entries completely" +
                    " filled out are added to the database", "Sorry...",
                    JOptionPane.WARNING_MESSAGE);
            for (int i = 0; i < notFilled.size(); i++){
                int index = notFilled.get(i);
                for (int j = 0; j < 6; j++){
                    this.coopEntryTable.setValueAt(
                            this.coopEntryTable.getValueAt(index, j), i, j);
                }
            }
            for (int i = notFilled.size();
                        i < this.coopEntryTable.getRowCount(); i++){
                for (int j = 0; j < 6; j++){
                    this.coopEntryTable.setValueAt("", i, j);
                }
            }
            this.jobAdded.setText("Please fill out above postings.");
            this.jobAdded.setForeground(Color.RED);
        }
    }//GEN-LAST:event_addPostingsActionPerformed

    private void addRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowsActionPerformed
        javax.swing.table.DefaultTableModel t =
                (javax.swing.table.DefaultTableModel)
                this.coopEntryTable.getModel();
        for (int i = 0; i < 10; i++){
            t.addRow(new Object[] {"", "", "", "", "", ""});
        }
    }//GEN-LAST:event_addRowsActionPerformed

    private void searchCoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCoopActionPerformed
        MyDTM t = (MyDTM)this.coopSearchTable.getModel();

        String[] keyWords = {"year_number", "business", "location",
            "activity", "contact"};
        String[] binary = {"OR", "AND"};

        String searchKey1 = keyWords[this.searchCombo1.getSelectedIndex()];
        String searchKey2 = keyWords[this.searchCombo2.getSelectedIndex()];
        String orderBy = keyWords[this.orderCombo.getSelectedIndex()];
        String combine = binary[this.andOR.getSelectedIndex()];
        String searchTerm1 = this.searchText1.getText();
        String searchTerm2 = this.searchText2.getText();

        if (searchKey1.equals("activity")){
            searchTerm1 = " LIKE '%" + searchTerm1 + "%'";
        } else {
            searchTerm1 = " = '" + searchTerm1 + "'";
        }

        if (searchKey2.equals("activity")){
            searchTerm2 = " LIKE '%" + searchTerm2 + "%'";
        } else {
            searchTerm2 = " = '" + searchTerm2 + "'";
        }

        String predicate = searchKey1 + searchTerm1 + combine
                + " " + searchKey2 + searchTerm2 + " order by " +
                orderBy;
        
        this.coopSearchPredicate = predicate;

        List<MvCoop> coopList = mvApp.selectEntitiesBy(MvCoop.class, predicate);

        while (this.coopSearchTable.getRowCount() > 0){
            t.removeRow(0);
        }

        if (coopList.size() == 0){
            t.addRow(new Object[] {"", "No Job Postings", " Matches Your",
                "Search Terms.", "Please Try Again.", "",});
        }
        for (MvCoop mvCoop : coopList){
            t.addRow(new Object[] {mvCoop.getYearNumber(), mvCoop.getBusiness(),
                mvCoop.getLocation(), mvCoop.getActivity(),
                mvCoop.getContact(), mvCoop.getPhone()});
        }
    }//GEN-LAST:event_searchCoopActionPerformed

    private void updateRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRowsActionPerformed
        int[] selected = this.coopSearchTable.getSelectedRows();

        if (selected.length == 0){
            this.rowsUpdated.setText("No rows is selected. Please select at" +
                    " least one row.");
            this.rowsUpdated.setForeground(Color.red);
            return;
        }

        if (this.coopSearchTable.getValueAt(0, 1) == "No Job Postings"){
            this.rowsUpdated.setText("This row cannot be selected.");
            this.rowsUpdated.setForeground(Color.red);
            return;
        }

        ArrayList<String[]> rowData = new ArrayList<String[]>();

        for (int i = 0; i < selected.length; i++){
            String[] row = {(String)this.coopSearchTable.getValueAt(selected[i], 0),
                            (String)this.coopSearchTable.getValueAt(selected[i], 1),
                            (String)this.coopSearchTable.getValueAt(selected[i], 2),
                            (String)this.coopSearchTable.getValueAt(selected[i], 3),
                            (String)this.coopSearchTable.getValueAt(selected[i], 4),
                            (String)this.coopSearchTable.getValueAt(selected[i], 5)};
            rowData.add(row);
        }

        CoopUpdateSheet newSheet =
                new CoopUpdateSheet(this.mvApp, rowData, this.rowsUpdated,
                this.coopSearchTable, this.coopSearchPredicate);
        JDialog dialog = new JDialog(this, "Update Co-op Job Listings", true);
        dialog.getContentPane().add(newSheet);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        newSheet.dialogWindow = dialog;
        dialog.setVisible(true);
    }//GEN-LAST:event_updateRowsActionPerformed

    private void admin_log_log_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_admin_log_log_listMouseClicked
        if (evt.getClickCount() < 2){
            return;
        }

        if (this.admin_log_log_list.isSelectionEmpty()) {
            return;
        }

        if (this.admin_log_log_list.getSelectedValue() == null){
            return;
        }

        String select_name =
                this.admin_log_log_list.getSelectedValue().toString();
        String[] parsed_name = select_name.split(" ");

        // if "Please select a student name" is selected, nothing will happen
        // otherwise retrieve a selected weekly log and pop up a window to display it
        if (parsed_name[0].equals("Please")) {
            return;
        }

        // get the week number
        int week_number = Integer.parseInt(parsed_name[2]);

        String select_name_predicate = "first_name = '" + this.curViewFirstName
                + "' AND last_name = '" + this.curViewLastName + "'";
        List<MvPerson> person = mvApp.selectEntitiesBy(MvPerson.class, select_name_predicate);
        MvPerson student = person.get(0);

        String select_person_predicate = "mv_person_id = " +
                student.getId().toString();
        List <MvUser> user_list =
                mvApp.selectEntitiesBy(MvUser.class, select_person_predicate);
        MvUser wanted_student = user_list.get(0);

        String predicate = "mv_student_id = " +
                wanted_student.getId().toString();

        // get the log of a selected week from a list of weekly log
        List<MvWeeklyLog> log_list =
                mvApp.selectEntitiesBy(MvWeeklyLog.class, predicate);

        MvWeeklyLog wanted_log = null;
        for (MvWeeklyLog mvweeklylog : log_list){
            if ((mvweeklylog.getWeekId().getWeekNumber() == week_number)
                && (mvweeklylog.getWeekId().getClassId().getId() ==
                Integer.parseInt(this.curViewClassID))){
                wanted_log = mvweeklylog;
            }
        }

        if (wanted_log == null){
            JOptionPane.showMessageDialog(null, "The Weekly Log Sheet selected"
                    + " has not yet been submitted.", "Sorry...",
                        JOptionPane.WARNING_MESSAGE);
                return;
        }

        // initialize the weekly log dialog window for administrator
        DetailLogSheet new_sheet = new DetailLogSheet(mvApp,
                Integer.parseInt(this.curViewClassID), wanted_log, student,
                this.admin_log_log_list);
        JDialog dialog = new JDialog(this, "Detail Log Sheet", true);
        dialog.getContentPane().add(new_sheet);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        new_sheet.dialogWindow = dialog;
        dialog.setVisible(true);
    }//GEN-LAST:event_admin_log_log_listMouseClicked

    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordActionPerformed
        String Password = mvApp.user.getUserPassword();
        char[] charOldPassword = this.oldPasswordField.getPassword();
        String oldPassword = new String(charOldPassword);
        char[] charNewPassword1 = this.newPassword1Field.getPassword();
        String newPassword1 = new String(charNewPassword1);
        char[] charNewPassword2 = this.newPassword2Field.getPassword();
        String newPassword2 = new String(charNewPassword2);

        if (oldPassword.length() == 0){
            this.oldPasswordField.requestFocus();
            this.changePasswordLabel.setText("Please enter the old password.");
            this.changePasswordLabel.setForeground(Color.red);
            return;
        }

        if (!Password.equals(oldPassword)){
            this.oldPasswordField.setText("");
            this.oldPasswordField.requestFocus();
            this.changePasswordLabel.setText("The old password is incorrect.");
            this.changePasswordLabel.setForeground(Color.red);
            return;
        }

        if (newPassword1.equals("")){
            this.newPassword1Field.requestFocus();
            this.changePasswordLabel.setText("Please enter the new password.");
            this.changePasswordLabel.setForeground(Color.red);
            return;
        }

        if (newPassword2.equals("")){
            this.newPassword2Field.requestFocus();
            this.changePasswordLabel.setText("Please re-type the new password.");
            this.changePasswordLabel.setForeground(Color.red);
            return;
        }

        if (!newPassword1.equals(newPassword2)){
            this.newPassword1Field.setText("");
            this.newPassword2Field.setText("");
            this.newPassword1Field.requestFocus();
            this.changePasswordLabel.setText("The new passwords do not match.");
            this.changePasswordLabel.setForeground(Color.red);
            return;
        }

        mvApp.user.setUserPassword(newPassword1);
        try {
            mvApp.MvUserController.edit(mvApp.user);
            this.oldPasswordField.setText("");
            this.newPassword1Field.setText("");
            this.newPassword2Field.setText("");
            this.oldPasswordField.requestFocus();
            this.changePasswordLabel.setText("The password is now changed.");
            this.changePasswordLabel.setForeground(Color.green);
        } catch (IllegalOrphanException ex) {
            Logger.getLogger(StudentUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(StudentUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(StudentUI.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_changePasswordActionPerformed

    private void submissionClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submissionClassActionPerformed
        List<MvClass> mvClassList = mvApp.selectEntitiesBy(MvClass.class, null);
        int selectedIndex = this.submissionClass.getSelectedIndex();
        if (selectedIndex == -1){
            return;
        }
        MvClass mvClass = mvClassList.get(selectedIndex);

        MyDTM t = new MyDTM();
        this.submissionTable.setModel(t);
        this.submissionTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        t.addColumn ((Object)"Student Names");

        String findWeek = "class_id = " + mvClass.getId() +
                " order by week_number";
        List<MvWeek> mvWeekList =
                mvApp.selectEntitiesBy(MvWeek.class, findWeek);

        for (MvWeek week : mvWeekList){
            t.addColumn((Object)String.valueOf(week.getWeekNumber()));
        }

        this.submissionTable.getColumnModel().getColumn(0).setPreferredWidth(120);

        if (mvWeekList.size() == 0){
            return;
        }

        for (int i = 1; i <= mvWeekList.size(); i++){
            this.submissionTable.getColumnModel().getColumn(i).setPreferredWidth(30);
        }

        ArrayList<MvUser> correctUserList = new ArrayList();

        List<MvUser> allUserList = mvApp.selectEntitiesBy(MvUser.class, null);
        for (MvUser singleUser : allUserList){
            MvPerson singlePerson = singleUser.getMvPersonId();
            String findEnrollment = "student_id = " + singlePerson.getId() +
                    " AND class_id = " + mvClass.getId();
            List<MvEnrollment> singleEnrollList =
                    mvApp.selectEntitiesBy(MvEnrollment.class, findEnrollment);
            if (singleEnrollList.size() != 0){
                correctUserList.add(singleUser);
            }
        }

        for (int i = 0; i < correctUserList.size(); i++){
            String lName = correctUserList.get(i).getMvPersonId().getLastName();
            String fName = correctUserList.get(i).getMvPersonId().getFirstName();
            String fullName = lName + ", " + fName;
            String[] newRow = new String[mvWeekList.size() + 1];
            newRow[0] = fullName;
            for (int j = 1; j <= mvWeekList.size(); j++){
                newRow[j] = "";
            }
            t.addRow(newRow);
            this.submissionTable.setValueAt((Object)fullName, i, 0);
        }

        for (int i = 0; i < correctUserList.size(); i++){
            MvUser user = correctUserList.get(i);
            for (int j = 0; j < mvWeekList.size(); j++){
                MvWeek week = mvWeekList.get(j);
                String findLog = "mv_student_id = " + user.getId() +
                        " AND week_id = " + week.getId();
                List<MvWeeklyLog> logList =
                        mvApp.selectEntitiesBy(MvWeeklyLog.class, findLog);
                if (logList.size() == 1){
                    MvWeeklyLog mvWeeklyLog = logList.get(0);
                    if (mvWeeklyLog.getApprovedId() != null){
                        this.submissionTable.setValueAt((Object)"   A",
                            i, j+1);
                    } else if (mvWeeklyLog.getDisapprovedId() != null){
                        this.submissionTable.setValueAt((Object)"   D",
                            i, j+1);
                    } else {
                        this.submissionTable.setValueAt((Object)"   S",
                            i, j+1);
                    }
                    
                }
            }
        }
    }//GEN-LAST:event_submissionClassActionPerformed

    private void studentListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentListMouseClicked
        if (evt.getClickCount() < 2){
            return;
        }

        int student = this.studentList.getSelectedIndex();

        // if nothing is selected, warn user to select an account
        if (student == -1){
            this.acctDisabledLabel.setText("Please select an account.");
            this.acctDisabledLabel.setForeground(Color.red);
            return;
        }

        // otherwise, get the account type and
        // parse the names in the textfield
        String fullName = new String();
        if (student != -1){
            fullName = (String) this.studentList.getSelectedValue();
            if (fullName.equals("Please select a class first.")){
                this.acctDisabledLabel.setText("Please select a class.");
                this.acctDisabledLabel.setForeground(Color.red);
                String[] listData = {"Please select a class first."};
                this.studentList.setListData(listData);
                return;
            }
            if (fullName.equals("There is currently students enrolled" +
                    " in this class.")){
                this.acctDisabledLabel.setText("Please select a class.");
                this.acctDisabledLabel.setForeground(Color.red);
                String[] listData = {"Please select a class first."};
                this.studentList.setListData(listData);
                return;
            }
        }

        String[] parsedName = fullName.split(" ");
        String firstName = parsedName[0];
        String lastName = parsedName[1];

        String predicate1 = " first_name = '" + firstName
                + "' AND last_name = '" + lastName + "'";
        List<MvPerson> rl = mvApp.selectEntitiesBy(MvPerson.class, predicate1);
        MvPerson mvPerson = rl.get(0);

        String findClass = "class_number = " + this.curClassNumber + " AND term = '" +
                curClassTerm + "'";
        List<MvClass> classesList =
                mvApp.selectEntitiesBy(MvClass.class, findClass);
        MvClass mvClass = classesList.get(0);

        StudentInfoSheet newSheet =
                new StudentInfoSheet(this.mvApp, mvClass, mvPerson,
                this.acctDisabledLabel);
        JDialog dialog = new JDialog(this, "Student Info Sheet", true);
        dialog.getContentPane().add(newSheet);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        newSheet.dialogWindow = dialog;
        dialog.setVisible(true);
    }//GEN-LAST:event_studentListMouseClicked

    private void changeStudentPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeStudentPasswordActionPerformed
        String userName = this.userNameField.getText();

        String findUser = "user_name = '" + userName + "'";
        List<MvUser> userList = mvApp.selectEntitiesBy(MvUser.class, findUser);

        if (userList.size() == 0){
            this.userNameField.setText("");
            this.userNameField.requestFocus();
            this.changeStudentPasswordLabel.setText("Such user does" +
                    " not exist.");
            this.changeStudentPasswordLabel.setForeground(Color.red);
            return;
        }

        MvUser user = userList.get(0);

        char[] charNewPassword1 = this.newStudentPassword1Field.getPassword();
        String newPassword1 = new String(charNewPassword1);
        char[] charNewPassword2 = this.newStudentPassword2Field.getPassword();
        String newPassword2 = new String(charNewPassword2);

        if (newPassword1.equals("")){
            this.newStudentPassword1Field.requestFocus();
            this.changeStudentPasswordLabel.setText("Please enter the new password.");
            this.changeStudentPasswordLabel.setForeground(Color.red);
            return;
        }

        if (newPassword2.equals("")){
            this.newStudentPassword2Field.requestFocus();
            this.changeStudentPasswordLabel.setText("Please re-type the new password.");
            this.changeStudentPasswordLabel.setForeground(Color.red);
            return;
        }

        if (!newPassword1.equals(newPassword2)){
            this.newStudentPassword1Field.setText("");
            this.newStudentPassword2Field.setText("");
            this.newStudentPassword1Field.requestFocus();
            this.changeStudentPasswordLabel.setText("The new passwords do not match.");
            this.changeStudentPasswordLabel.setForeground(Color.red);
            return;
        }

        user.setUserPassword(newPassword1);
        try {
            mvApp.MvUserController.edit(user);
            this.userNameField.setText("");
            this.newStudentPassword1Field.setText("");
            this.newStudentPassword2Field.setText("");
            this.userNameField.requestFocus();
            this.changeStudentPasswordLabel.setText("The password is now changed.");
            this.changeStudentPasswordLabel.setForeground(Color.green);
        } catch (IllegalOrphanException ex) {
            Logger.getLogger(StudentUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(StudentUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(StudentUI.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_changeStudentPasswordActionPerformed

    /*
     * initialize the information on the panel of clicked tab
     */
    public void changeTab(){
        JPanel selectedTab = (JPanel) this.mainPane.getSelectedComponent();
        if (selectedTab.getName().equals("homeTab")){
            // initialize the home page
            prepareHomeTab();
        } else if (selectedTab.getName().equals("accountTab")){
            // initialize the account page
            prepareAccountTab();
        } else if (selectedTab.getName().equals("weeklyLogTab")){
            // initialize the weekly log page
            prepareWeeklylogTab();
        } else if (selectedTab.getName().equals("coopTab")){
            prepareCoopTab();
        } else if (selectedTab.getName().equals("reportTab")){
            prepareReportTab();
        }
    }

    /*
     * update information on the panel when user click the home tab
     */
     private void prepareHomeTab(){

        String firstName = mvApp.user.getMvPersonId().getFirstName();
        String lastName = mvApp.user.getMvPersonId().getLastName();
        this.name_label.setText("Welcome, " + firstName + " " +
                lastName);

        //Set today field
        Date today = new Date();
        SimpleDateFormat df = new SimpleDateFormat("MMMM dd,yyyy");
        this.today_label.setText("Today is " + df.format(today));


        // set the pending approval
        int pending_approval = 0;
        List <MvWeeklyLog> log_list = mvApp.selectEntitiesBy(MvWeeklyLog.class, null);
        for (MvWeeklyLog mvweeklylog : log_list) {
            if ((mvweeklylog.getApprovedId() == null) &&
                    mvweeklylog.getDisapprovedId() == null) {
                pending_approval++;
            }
        }
        this.admin_home_pending_label.setText(String.valueOf(pending_approval));
     }

     /**
      * update information on the panel when user click the account tab
      */
     private void prepareAccountTab(){
        this.studentOrAdmin.add(this.studentRadio);
        this.studentOrAdmin.add(this.adminRadio);
        this.studentRadio.setSelected(true);

        this.classSelection.add(this.selectRecent);
        this.classSelection.add(this.selectManual);
        this.selectRecent.setSelected(true);

        this.addSClassSelection.add(this.addSSelectRecent);
        this.addSClassSelection.add(this.addSSelectManual);
        this.addSSelectRecent.setSelected(true);

        String selectAdmin = "person_group_id = 3";
        List<MvPerson> personList2 = mvApp.selectEntitiesBy(MvPerson.class, selectAdmin);
        String[] listAdmins = new String[personList2.size()];
        int j = 0;
        for (MvPerson mvPerson : personList2){
            String disabled = "";
            String selectUser = "mv_person_id = " + mvPerson.getId();
            List<MvUser> r4 = mvApp.selectEntitiesBy(MvUser.class, selectUser);
            MvUser mvUser = r4.get(0);
            if (mvUser.getActive() == false){
                disabled = " - Account Disabled";
            }
            String name2 = mvPerson.getFirstName() + " "
                                + mvPerson.getLastName() + disabled;
            listAdmins[j] = name2;
            j++;
        }
        this.adminList.setListData(noNullArray(listAdmins));

        List<MvClass> classesList = mvApp.selectEntitiesBy(MvClass.class, null);
        String[] listClasses = new String[classesList.size()];
        int k = 0;
        for (MvClass mvClass : classesList){
            String name = mvClass.getClassName();
            String term = mvClass.getTerm();
            String classNumber = Integer.toString(mvClass.getClassNumber());
            String classStr = term + " - Class No. " + classNumber + " - " +
                    name;
            listClasses[k] = classStr;
            k++;
        }
        this.classList.setListData(noNullArray(listClasses));
     }

     /**
      * update information on the panel when user click the weekly log tab
      */
     private void prepareWeeklylogTab() {
        List<MvClass> classesList = mvApp.selectEntitiesBy(MvClass.class, null);
        String[] listClasses = new String[classesList.size()];
        int k = 0;
        for (MvClass mvClass : classesList){
            String name = mvClass.getClassName();
            String term = mvClass.getTerm();
            String classNumber = Integer.toString(mvClass.getClassNumber());
            String classStr = term + " - Class No. " + classNumber + " - " +
                    name;
            listClasses[k] = classStr;
            k++;
        }
        this.admin_log_class_list.setListData(noNullArray(listClasses));
     }

     private void prepareCoopTab() {
        javax.swing.table.DefaultTableModel t1 =
                new javax.swing.table.DefaultTableModel();
        this.coopEntryTable.setModel(t1);
        t1.addColumn ((Object)"Year");
        t1.addColumn ((Object)"Business");
        t1.addColumn ((Object)"Location");
        t1.addColumn ((Object)"Activity");
        t1.addColumn ((Object)"Contact");
        t1.addColumn ((Object)"Phone Number");
        for (int i = 0; i < 20; i++){
            t1.addRow(new Object[] {"", "", "", "", "", ""});
        }

        MyDTM t2 = new MyDTM();
        this.coopSearchTable.setModel(t2);
        t2.addColumn ((Object)"Year");
        t2.addColumn ((Object)"Business");
        t2.addColumn ((Object)"Location");
        t2.addColumn ((Object)"Activity");
        t2.addColumn ((Object)"Contact");
        t2.addColumn ((Object)"Phone Number");
     }

     private void prepareReportTab(){
        this.submissionClass.removeAllItems();
        List<MvClass> mvClassList = mvApp.selectEntitiesBy(MvClass.class, null);
        for (MvClass mvClass : mvClassList){
            String classNumber = String.valueOf(mvClass.getClassNumber());
            String schoolTerm = mvClass.getTerm();
            String className = mvClass.getClassName();
            String classValue = schoolTerm + " - Class No. " + classNumber +
                    " - " + className;
            this.submissionClass.addItem((Object) classValue);
        }
     }

     private String[] noNullArray (String[] nullArray){
        int count = 0;
        for (int i = 0; i < nullArray.length; i++){
            if (nullArray[i] != null){
                count++;
            }
        }
        String[] noNullArray = new String[count];
        int index = 0;
        for (int i = 0; i < nullArray.length; i++){
            if (nullArray[i] != null){
                noNullArray[index] = nullArray[i];
                index++;
            }
        }
        return noNullArray;
    }

    private void centerPosition() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenDim = tk.getScreenSize();
        Dimension appDim = this.getSize();
        this.setLocation((screenDim.width-appDim.width)/2,
                         (screenDim.height-appDim.height)/2);
    }

     public class MyDTM extends javax.swing.table.DefaultTableModel{
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
     }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminUI(new Application()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel acc_panel;
    private javax.swing.JTabbedPane accountPane;
    private javax.swing.JLabel acctCreatedLabel;
    private javax.swing.JLabel acctDisabledLabel;
    private javax.swing.JComboBox addAClassNum;
    private javax.swing.JButton addPostings;
    private javax.swing.JButton addRows;
    private javax.swing.ButtonGroup addSClassSelection;
    private javax.swing.JComboBox addSSchoolSeason;
    private com.toedter.calendar.JYearChooser addSSchoolYear;
    private javax.swing.JRadioButton addSSelectManual;
    private javax.swing.JRadioButton addSSelectRecent;
    private javax.swing.JButton addWeek;
    private javax.swing.JList adminList;
    private javax.swing.JRadioButton adminRadio;
    private javax.swing.JLabel admin_home_pending_label;
    private javax.swing.JList admin_log_class_list;
    private javax.swing.JList admin_log_log_list;
    private javax.swing.JList admin_log_student_list;
    private javax.swing.JComboBox andOR;
    private javax.swing.JButton changePassword;
    private javax.swing.JLabel changePasswordLabel;
    private javax.swing.JButton changeStudentPassword;
    private javax.swing.JLabel changeStudentPasswordLabel;
    private javax.swing.JLabel classCreatedLabel;
    private javax.swing.JList classList;
    private javax.swing.JTextField classNameField;
    private javax.swing.JComboBox classNum;
    private javax.swing.JComboBox classSeason;
    private javax.swing.ButtonGroup classSelection;
    private com.toedter.calendar.JYearChooser classYear;
    private javax.swing.JPanel class_term;
    private javax.swing.JButton clearAll;
    private javax.swing.JTable coopEntryTable;
    private javax.swing.JTable coopSearchTable;
    private javax.swing.JPanel coop_panel;
    private javax.swing.JButton create_class;
    private javax.swing.JButton disableAccount;
    private javax.swing.JButton enableAccount;
    private javax.swing.JButton exit;
    private javax.swing.JTextField fri;
    private javax.swing.JButton home_logout_button;
    private javax.swing.JPanel home_panel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel jobAdded;
    private javax.swing.JTabbedPane mainPane;
    private javax.swing.JTextField mon;
    private javax.swing.JLabel mv_icon;
    private javax.swing.JLabel name_label;
    private javax.swing.JButton newAccountButton;
    private javax.swing.JTextField newAcctFirstName;
    private javax.swing.JTextField newAcctLastName;
    private javax.swing.JPasswordField newPassword1Field;
    private javax.swing.JPasswordField newPassword2Field;
    private javax.swing.JPasswordField newStudentPassword1Field;
    private javax.swing.JPasswordField newStudentPassword2Field;
    private javax.swing.JPasswordField oldPasswordField;
    private javax.swing.JComboBox orderCombo;
    private javax.swing.JPanel personal_panel;
    private javax.swing.JPanel report_panel;
    private javax.swing.JTextField reqCoopHrs;
    private javax.swing.JLabel rowsUpdated;
    private javax.swing.JTextField sat;
    private javax.swing.JComboBox searchCombo1;
    private javax.swing.JComboBox searchCombo2;
    private javax.swing.JButton searchCoop;
    private javax.swing.JTextField searchText1;
    private javax.swing.JTextField searchText2;
    private javax.swing.JComboBox selectClassNum;
    private javax.swing.JRadioButton selectManual;
    private javax.swing.JRadioButton selectRecent;
    private javax.swing.JComboBox selectSchoolSeason;
    private com.toedter.calendar.JYearChooser selectSchoolYear;
    private javax.swing.JList studentList;
    private javax.swing.ButtonGroup studentOrAdmin;
    private javax.swing.JRadioButton studentRadio;
    private javax.swing.JComboBox submissionClass;
    private javax.swing.JTable submissionTable;
    private javax.swing.JTextField thu;
    private javax.swing.JLabel today_label;
    private javax.swing.JTextField tue;
    private javax.swing.JButton updateRows;
    private javax.swing.JTextField userNameField;
    private javax.swing.JTextField wed;
    private javax.swing.JLabel weekAddedLabel;
    private com.toedter.calendar.JDateChooser weekDueDate;
    private com.toedter.calendar.JDateChooser weekEnd;
    private javax.swing.JComboBox weekNum;
    private com.toedter.calendar.JDateChooser weekStart;
    private javax.swing.JPanel week_log_panel;
    // End of variables declaration//GEN-END:variables

}
